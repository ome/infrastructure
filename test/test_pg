#!/bin/bash

# test_pg: assumes that a docker instance is available locally
# and that the current PYTHONPATH contains docker-py.

## VARIABLES

# On travis, it's assumed that the docker host is unencrypted.
# This will need to be "encrypt" for testing on docker-machine.
USE_TLS=${USE_TLS:-"no"}

# Using first python on the path, assuming that requirements
# have been pip installed
PYTHON="ansible_python_interpreter=$(which python)"

# Using a non-default port for postgres, assuming that a local
# instance is already running
PORT=${PORT:-5433}


TESTHOST="$(mktemp test_pg.XXXXXX)"
trap "rm -rf $TESTHOST" EXIT ERR

cat - <<EOF > $TESTHOST
[docker-pg]
localhost docker_pg_port=$PORT docker_use_tls=$USE_TLS ansible_connection=local $PYTHON
EOF

set -e
set -u
set -x

ansible-playbook -i $TESTHOST ansible/pg-deployment.yml                   # start postgres
docker run -id --name test_pg --link postgres postgres bash               # obtain a client IP

cleanup() {
  rm -rf $TESTHOST
  docker exec -u postgres postgres dropdb test_pg
  docker exec -u postgres postgres dropuser test_pg
  docker rm -f test_pg
}
trap cleanup EXIT ERR

HOST=$(docker inspect --format '{{ .NetworkSettings.IPAddress }}' test_pg)

#docker exec -u postgres postgres bash -c 'echo "host test_pg test_pg $HOST trust" >> /var/lib/postgresql/data/pg_hba.conf'
#docker kill --signal SIGHUP postgres

# 1. test a connection from test_pg
docker exec -u postgres postgres createuser -d test_pg
docker exec -u postgres test_pg createdb -h postgres -U test_pg test_pg

# 2. use a new container and see that a connection isn't possible.
docker run --rm --link postgres postgres psql -h postgres -U test_pg test_pg -c "select now()"
