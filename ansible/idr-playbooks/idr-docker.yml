# Setup IDR Docker nodes
# Inspired by https://thisendout.com/2016/09/13/deploying-docker-swarm-with-ansible/

# TODO: Convert this into one or more roles

# TODO: Docker uses an incorrect MTU on OpenStack VMs, and it is not possible
# to easily set it on the swarm ingress network. See this workround:
# https://github.com/docker/docker/issues/24906#issuecomment-235894478
# This must be done before creating the swarm
#     docker network rm docker_gwbridge
#     docker network create --opt com.docker.network.driver.mtu=1400 --subnet 172.18.0.0/16 docker_gwbridge


- hosts: "{{ idr_environment | default('idr') }}-docker-hosts"

  pre_tasks:
  - name: enable/disable docker swarm
    set_fact:
      docker_swarm_enabled: False

  roles:

  - role: docker
    docker_use_ipv4_nic_mtu: True
  - role: docker-tools

  tasks:

  - name: docker swarm | check active
    become: yes
    shell: "docker info 2> /dev/null | sed -n 's/^Swarm: //p'"
    always_run: yes
    ignore_errors: yes
    register: docker_swarm_active
    changed_when: False

  # TODO: Maybe check docker_use_ipv4_nic_mtu?
  # TODO: Use docker_network when we switch to Ansible 2.2
  - name: docker swarm | check mtu
    become: yes
    command: docker network inspect docker_gwbridge -f "{{ '{{' }} index .Options \"com.docker.network.driver.mtu\" {{ '}}' }}"
    always_run: yes
    #ignore_errors: yes
    register: docker_swarm_net_mtu
    #changed_when: "(docker_use_ipv4_nic_mtu | default(True)) and
    changed_when: docker_swarm_net_mtu.stdout != "{{ ansible_default_ipv4.mtu }}"
    failed_when: "(docker_swarm_net_mtu.rc != 0) and {{ not docker_swarm_net_mtu.stderr.endswith('No such network: docker_gwbridge') }}"

  - name: docker swarm | network mtu delete docker_gwbridge
    become: yes
    command: docker network rm docker_gwbridge
    register: docker_swarm_net_rm
    failed_when: "(docker_swarm_net_rm.rc != 0) and {{ not docker_swarm_net_rm.stderr.endswith('network docker_gwbridge not found') }}"
    when: docker_swarm_net_mtu.changed

  # TODO: Make subnet configurable
  - name: docker swarm | network mtu create docker_gwbridge
    become: yes
    command: docker network create --opt com.docker.network.driver.mtu={{ ansible_default_ipv4.mtu }} --subnet 172.18.0.0/16 docker_gwbridge
    when: docker_swarm_net_mtu.changed


- hosts: "{{ idr_environment | default('idr') }}-dockermanager-hosts"

  pre_tasks:

  - name: docker swarm | get docker host ips
    set_fact:
      docker_host_ips: "{{ groups[idr_environment | default('idr') + '-docker-hosts'] | map('extract', hostvars, 'ansible_' + (idr_net_iface | default('eth0'))) | map(attribute='ipv4') | map(attribute='address') | list }}"

  # Create a list of dicts: http://stackoverflow.com/a/35608380
  # TODO: `no_root_squash` is potentially unsafe but docker requires root
  - name: docker swarm | get docker nfs server config
    set_fact:
      docker_nfs_clients:
        "{{ docker_nfs_clients | default([]) + [ { 'host': item, 'options': 'rw,no_root_squash' } ] }}"
    with_items: docker_host_ips

  - debug:
      msg: "{{ docker_nfs_clients }}"

  roles:

  - role: nfs-share
    nfs_shares: "{{ {'/data': docker_nfs_clients } }}"
    when: docker_swarm_enabled

  tasks:

  - set_fact:
      docker_swarm_manager_ip: "{{ hostvars[groups[idr_environment | default('idr') + '-dockermanager-hosts'][0]]['ansible_' + (idr_net_iface | default('eth0'))]['ipv4']['address']}}"

  - name: docker swarm | initialise
    become: yes
    command: docker swarm init --advertise-addr {{ docker_swarm_manager_ip }}
    when: docker_swarm_active.stdout != 'active' and docker_swarm_enabled

  - name: docker swarm | get worker token
    become: yes
    command: docker swarm join-token worker -q
    register: docker_swarm_worker_token_out
    when: docker_swarm_enabled


  - set_fact:
      docker_swarm_worker_token: "{{ docker_swarm_worker_token_out.stdout }}"
    when: docker_swarm_enabled


- hosts: "{{ idr_environment | default('idr') }}-dockerworker-hosts"

  tasks:

  - name: docker swarm | mount nfs share
    become: yes
    mount:
      fstype: nfs4
      name: "/data"
      opts: rsize=8192,wsize=8192,timeo=14,intr,rw
      src: "{{ manager_ip }}:/data"
      state: mounted

  - name: docker swarm | join worker
    become: yes
    command: docker swarm join --token {{ token }} {{ manager_ip }}
    when: docker_swarm_active.stdout != 'active'

  vars:
    token: "{{ hostvars[groups[idr_environment | default('idr') + '-dockermanager-hosts'][0]]['docker_swarm_worker_token'] }}"
    manager_ip: "{{ hostvars[groups[idr_environment | default('idr') + '-dockermanager-hosts'][0]]['docker_swarm_manager_ip'] }}"


- hosts: "{{ idr_environment | default('idr') }}-omero-hosts"
  # Empty playbook to force loading of omero-hosts hostvars

- hosts: "{{ idr_environment | default('idr') }}-dockermanager-hosts"

  pre_tasks:

  - name: jupyterhub | check private vars are defined
    assert:
      msg: "Required idr_jupyter_* variable missing"
      that:
        - "idr_jupyter_users is defined"
        - "idr_jupyter_admins is defined"
        - "idr_jupyter_urlbase is defined"
        - "idr_jupyter_prefix is defined"
        - "idr_jupyter_github_id is defined"
        - "idr_jupyter_github_secret is defined"

  roles:
  - role: versioncontrol-utils

  tasks:

  - name: jupyterhub | create jupyter working directory
    become: yes
    file:
      path: /srv/jupyterhub
      state: directory

  - name: jupyterhub | copy jupyter configuration file
    become: yes
    template:
      src: files/jupyterhub_config-py.j2
      dest: /srv/jupyterhub/jupyterhub_config.py
    register: jupyterconfig

  - name: jupyterhub | pull images
    become: yes
    docker_image:
      name: "{{ item }}"
      state: "present"
      force: "{{ idr_docker_pull_latest }}"
    with_items:
    - "{{ idr_jupyter_hub_image }}"
    - "{{ idr_jupyter_notebook_image }}"

  # TODO: The above `docker_image` only pulls latest
  # Should be fixed in Ansible 2.2
  # https://github.com/ansible/ansible/pull/16680
  # idr_jupyter_hub_image is automatically pulled since the systemd service
  # runs docker, but docker-py won't pull idr_jupyter_notebook_image
  - name: jupyterhub | check if notebook image present (ansible 2.1 bug)
    become: yes
    command: docker images -q "{{ idr_jupyter_notebook_image }}"
    register: docker_image_jhnote
    always_run: yes
    changed_when: "{{ docker_image_jhnote.stdout | length }} < 1"

  - name: jupyterhub | pull notebook image (ansible 2.1 bug)
    become: yes
    command: docker pull "{{ idr_jupyter_notebook_image }}"
    when: docker_image_jhnote.changed

  - name: jupyterhub | create systemd service
    become: yes
    template:
      src: files/jupyterhub-docker.j2
      dest: /etc/systemd/system/docker-jupyterhub.service
    register: systemdjupyter

  - name: jupyterhub | reload systemd
    become: yes
    command: systemctl daemon-reload
    when: systemdjupyter.changed

  - name: jupyterhub | restart
    become: yes
    service:
      name: docker-jupyterhub.service
      state: restarted
    when: jupyterconfig.changed

  - name: jupyterhub | enable jupyterhub
    become: yes
    service:
      enabled: yes
      name: docker-jupyterhub.service
      state: started

  - name: jupyterhub | check if idr-notebooks repo exists
    stat:
      path: "{{ idr_jupyter_notebook_host_volume }}/.git/HEAD"
    register: idr_notebook_st

  # If a repo exists locally don't update it in case there are local changes
  - name: jupyterhub | clone idr-notebooks
    become: yes
    git:
      dest: "{{ idr_jupyter_notebook_host_volume }}/"
      repo: "{{ idr_jupyter_notebook_repo }}"
      force: no
      version: "{{ idr_jupyter_notebook_repo_version | default('HEAD') }}"
    when: not idr_notebook_st.stat.exists

  - name: jupyterhub | create scratch notebooks directory
    become: yes
    file:
      mode: "0755"
      owner: 1000
      path: "{{ idr_jupyter_notebook_host_volume }}/scratch"
      state: directory

  - name: jupyterhub | update jupyter omero connection file
    become: yes
    blockinfile:
      dest: "{{ idr_jupyter_notebook_host_volume }}/library/idr_demo.py"
      insertafter: "### ANSIBLE MANAGED BEGIN"
      state: present
      # This ensures the code will be indented with 4 spaces
      block: |6
                HOSTNAME = "{{ idr_jupyter_omero_host }}"
                USERNAME = "{{ idr_jupyter_omero_user }}"
                PASSWORD = "{{ idr_jupyter_omero_pass | quote }}"

  vars:
  #- idr_jupyter_urlbase: "http://example.org"
  - idr_docker_pull_latest: True
  - idr_jupyter_ip: "{{ hostvars[inventory_hostname]['ansible_' + (idr_net_iface | default('eth0'))]['ipv4']['address'] }}"
  - idr_jupyter_hub_image: "imagedata/jupyterhub-githubauth:0.1.0"
  - idr_jupyter_notebook_image: "imagedata/jupyter-docker:0.1.0"
  - idr_jupyter_hub_log_level: DEBUG
  #- idr_jupyter_prefix: "/jupyter"
  # If you don't define this it will be auto-generated by hub, but it means
  # all proxies must be restarted if you restart the hub
  # http://jupyterhub.readthedocs.io/en/latest/getting-started.html#proxy-authentication-token
  #- idr_jupyter_proxy_token:
  # Mount this volume as /notebooks inside the docker container
  # You must ensure it has the correct permissions for writing
  # idr_jupyter_notebook_host_volume: "/data/{username}"
  - idr_jupyter_notebook_host_volume: /data/idr-notebooks
  # In theory it should be possible to have container survive a restart of
  # the hub. In practice it seems to lead to permission problems.
  - idr_jupyter_notebook_remove_containers: True
  - idr_jupyter_notebook_repo: https://github.com/IDR/idr-notebooks.git
  - idr_jupyter_notebook_repo_version: "0.1.0"
  - idr_jupyter_omero_host: "{{ hostvars[groups[idr_environment | default('idr') + '-omero-hosts'][0]]['ansible_' + (idr_net_iface | default('eth0'))]['ipv4']['address'] }}"
  - idr_jupyter_omero_user: public
  - idr_jupyter_omero_pass: public
  # This must match the userid of the idr_jupyter_notebook_image user
  - idr_jupyter_notebook_system_uid: 1000
  - idr_jupyter_notebook_volumes: >
      {
        '{{ idr_jupyter_notebook_host_volume }}': '/notebooks',
        '/uod/idr/features': {'bind': '/uod/idr/features', 'mode': 'ro'},
      }
